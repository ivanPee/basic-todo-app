var t=(t,e)=>{const{services:o,getSchema:d,database:s}=e;t.get("/test",((t,e)=>e.send("Hello, World!"))),t.get("/get-todo",(async(t,e)=>{const o=await s.from("todo").select("*").orderBy("date_created","desc");e.send(o)})),t.post("/add-todo",(async(t,e)=>{const o=t.body.todo_text,d=t.body.status,r=(new Date).toISOString();try{const t=await s.from("todo").insert({todo_text:o,status:d,date_created:r});e.send(t)}catch(t){console.error("Error adding todo:",t),e.status(500).send("There was an error adding the todo.")}})),t.patch("/edit-todo",(async(t,e)=>{const o=t.body.id,d=t.body.todo_text,r=t.body.status,a=(new Date).toISOString();try{const t=await s.from("todo").where({id:o}).update({todo_text:d,status:r,date_updated:a});if(!t)throw new Error("Update failed");e.json({success:!0,message:"Todo updated successfully",rowsAffected:t})}catch(t){console.error("Error updating todo:",t),e.status(500).send("There was an error updating the todo.")}})),t.patch("/delete-todo",(async(t,e)=>{const o=t.body.id;try{const t=await s.from("todo").where({id:o}).delete();if(!t)throw new Error("Update failed");e.json({success:!0,message:"Todo deleted successfully",rowsAffected:t})}catch(t){console.error("Error updating todo:",t),e.status(500).send("There was an error deleting the todo.")}}))};export{t as default};
